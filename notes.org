
* Chapter 1 Values, Types, and Operators
* Chapter 2 Program Structure
* Chapter 3 Functions
* Chapter 4 Data Structure: Objects and Arrays
* Chapter 5: Higher-Order Functions
* Chapter 6: Secret Life of Objects
**  Encapsulation

In this section we gloss over how one might achieve some OOP
concepts in JS. For instance, interfaces are defined in objects with 
properties and  methods. 

Code which is internal to the object in other words private cannot be
explicitly enforced in JS, not yet at least. Thus it is recommended
that developers properly document their interfaces in order to communicate 
with others how to properly use the interface. Also Declaring properties
by appending __ is a common method used to indicate that something
is private. 

** Methods
We begin this section by defining a method as a property of an object,
which holds a function value. For example.


#+Name: Method Example
#+Begin_SRC js

let obj = {};

obj.speak = function(line) {
    console.log(`The Caller says '${line}'`);
};

obj.speak("Hey There");
// -> The Caller says 'Hey There'
#+END_SRC

Methods are generally called to do something to the object on which
they were called upon. Consequently when a function is called as a
method, in other words called by looking up a property and immediately
calling it, a reference to the object is implicitly passed to the
function and can be accessed via the 'this' keyword. For example.


#+Name: Accessing an object's method. 
#+Begin_SRC js

function speak(line) {
    console.log(`The ${this.color} rabbit says '${line}'`);
}

let rabbit = {
    color: "white",
    speak
};

rabbit.speak("I'm Late!");
// -> The rabbit says 'I'm Late'
#+END_SRC


If you ever wanted to call speak and explicitly pass this to it you
could achieve the same effect by using a functions call method. which
takes in a reference to 'this' as its first value.

#+Name: Explicitly Passing this to methods
#+BEGIN_SRC js

speak.call(rabbit, "I'm Late!");
// -> The rabbit says 'I'm Late' 
#+END_SRC


Note you cannot refer to the wrapping object with 'this', when inside a
regular function defined with the function keyword. In order to bypass
this you should use arrow functions, which do not instantiate their own
'this', unlike regular functions. Keeping that in mind we can now do the
following. 

#+Name: Accessing the wrapping this, via arrow functions. 
#+BEGIN_SRC js

function normalize() {
    console.log(this.coords.map(n => n / this.length));
}

normalize.call({cords : [0, 2, 3], length: 5});
// -> [0, 0.4, 0.6]
#+END_SRC

If we had written the argument to map using the function keyword, the
code would not work. 

** Prototypes
While objects are composed of properties, they also contain prototypes.
A prototype is an object, which is used as a source of fallback 
properties. In other words, when a property is not found within an 
object, its prototype will be searched, and if that fails the prototypes
prototype will be searched, and so on and so forth. 

By default prototypes provide some some basic methods, such as toString()

#+Name: Accessing an propertyless objects, prototype. 
#+Begin_SRC js

let empty = {};

console.log(empty.toString);
// -> function toString(){..}
console.log(x.toString());
// -> [object Object]

#+END_SRC

Here we can see that our empty object, contains no properties. So when
we call its toString() method, javascript defaults back to its prototype
to see if its declared there, which it is. 

This begs the question, what is the prototype of the our empty object?
Its the ancestral prototype, which is give to almost all objects, 
~Object.prototype~. 

In order to get the prototype of an object, we can make use of an
object's ~getPrototypeOf~  method. 

#+Name: Getting the prototype of an object. 
#+Begin_SRC js

console.log(Object.getPrototypeOf({}) == Object.prototype);
// -> true
console.log(Object.getPrototypeOf(Object.prototype));
// -> null

#+END_SRC

You can also create objects and specify the prototype they should use
with the ~Object.create~ method. 

#+Name: Specifying an object's prototype
#+Begin_SRC js

let protoAnimal = {
  speak(noise) {
    console.log(noise);
  }
};

let dog = Object.create(protoAnimal);
dog.speak("Bow Wow");
// -> Bow Wow

#+END_SRC

Note we do not explicitly state the property name speak in our 
protoAnimal object, this is a neat shorthand feature in javascript
where the a methods name is defaulted to the property name as well.

** Classes

